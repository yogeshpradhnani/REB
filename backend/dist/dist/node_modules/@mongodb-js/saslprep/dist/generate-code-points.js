"use strict";

var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }return target;
};

var __createBinding = undefined && undefined.__createBinding || (Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function get() {
                return m[k];
            } };
    }
    Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = undefined && undefined.__setModuleDefault || (Object.create ? function (o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
} : function (o, v) {
    o["default"] = v;
});
var __importStar = undefined && undefined.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = undefined && undefined.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var zlib_1 = require("zlib");
var sparse_bitfield_1 = __importDefault(require("sparse-bitfield"));
var codePoints = __importStar(require("./code-points-src"));
var fs_1 = require("fs");
var prettier = __importStar(require("prettier"));
var unassigned_code_points = (0, sparse_bitfield_1["default"])();
var commonly_mapped_to_nothing = (0, sparse_bitfield_1["default"])();
var non_ascii_space_characters = (0, sparse_bitfield_1["default"])();
var prohibited_characters = (0, sparse_bitfield_1["default"])();
var bidirectional_r_al = (0, sparse_bitfield_1["default"])();
var bidirectional_l = (0, sparse_bitfield_1["default"])();
function traverse(bits, src) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = src.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var code = _step.value;

            bits.set(code, true);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator["return"]) {
                _iterator["return"]();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    var buffer = bits.toBuffer();
    return Buffer.concat([createSize(buffer), buffer]);
}
function createSize(buffer) {
    var buf = Buffer.alloc(4);
    buf.writeUInt32BE(buffer.length);
    return buf;
}
var memory = [];
memory.push(traverse(unassigned_code_points, codePoints.unassigned_code_points), traverse(commonly_mapped_to_nothing, codePoints.commonly_mapped_to_nothing), traverse(non_ascii_space_characters, codePoints.non_ASCII_space_characters), traverse(prohibited_characters, codePoints.prohibited_characters), traverse(bidirectional_r_al, codePoints.bidirectional_r_al), traverse(bidirectional_l, codePoints.bidirectional_l));
function writeCodepoints() {
    var config, formatOptions, write, fsStreamUncompressedData;
    return regeneratorRuntime.async(function writeCodepoints$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                write = function write(stream, chunk) {
                    return new Promise(function (resolve) {
                        return stream.write(chunk, function () {
                            return resolve();
                        });
                    });
                };

                context$1$0.next = 3;
                return regeneratorRuntime.awrap(prettier.resolveConfig(__dirname));

            case 3:
                config = context$1$0.sent;
                formatOptions = _extends({}, config, { parser: 'typescript' });
                context$1$0.next = 7;
                return regeneratorRuntime.awrap(write((0, fs_1.createWriteStream)(process.argv[2]), prettier.format("import { gunzipSync } from 'zlib';\n  \n  export default gunzipSync(\n    Buffer.from(\n      '" + (0, zlib_1.gzipSync)(Buffer.concat(memory), { level: 9 }).toString('base64') + "',\n      'base64'\n    )\n  );\n  ", formatOptions)));

            case 7:
                fsStreamUncompressedData = (0, fs_1.createWriteStream)(process.argv[3]);
                context$1$0.next = 10;
                return regeneratorRuntime.awrap(write(fsStreamUncompressedData, prettier.format("const data = Buffer.from('" + Buffer.concat(memory).toString('base64') + "', 'base64');\nexport default data;\n", formatOptions)));

            case 10:
            case "end":
                return context$1$0.stop();
        }
    }, null, this);
}
writeCodepoints()["catch"](function (error) {
    return console.error('error occurred generating saslprep codepoint data', { error: error });
});
//# sourceMappingURL=generate-code-points.js.map